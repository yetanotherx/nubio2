<?php

/**
 * NubioTopic
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    nubio
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class NubioTopic extends BaseNubioTopic
{
	
	public function getHistoryListQueryFromID( $id ) {
    	return Doctrine_Core::getTable('NubioRevision')
			->createBaseQuery()
			->where( 'r.topic_id = ?', $id );
    }
    
    public function getCategory() {
    	return Doctrine_Core::getTable( 'NubioCategory' )->
    		createQuery( 'c' )->
    		where( 'c.id = ?', $this->category_id )->
    		fetchOne();
    }
    
	public function revisionSaveInternal(Doctrine_Connection $conn = null, sfForm $form = null) {
		$params = $form->getTaintedValues();
		$oldparams = $form->GetOption('currentVals');
		
		$rev = new NubioRevision();
		
		$props = array();
		
		$rev->helper_id = $form->getOption('userID');
		$rev->topic_id = $this->getId();
		$rev->text = $params['answer'];
		$rev->comment = $params['comment'];
		
		$props_parse = function( $name ) use( $params, $oldparams, &$props ) {
			if( $params[$name] != $oldparams[$name] ) {
				$props['old' . $name] = $oldparams[$name];
				$props['new' . $name] = $params[$name];
			}
		};
		
		if( $this->getId() ) {
			foreach( 
				array(
					'summary',
					'category_id',
					'keywords'
				) as $name ) {
					$props_parse( $name );
			}
		}
		else {
			$post_topic_update = true;
		}
		
		$rev->props = serialize($props);
		$rev->save($conn);
		$this->revision_id = $rev->getId();
		
		$ret = parent::save($conn);
		
		if( isset( $post_topic_update ) ) {
			Doctrine_Core::getTable('NubioRevision')->setTopicId( $rev->getId(), $this->getId() );
		}
		
		return $ret;

	}
	
	public function updateLuceneIndex() {
		$index = NubioTopicTable::getLuceneIndex();
		
		// remove existing entries
		foreach ($index->find('pk:'.$this->getId()) as $hit) {
			$index->delete($hit->id);
		}
		
		$doc = new Zend_Search_Lucene_Document();
		
		$doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('summary', $this->getSummary(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('keywords', $this->getKeywords(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('text', $this->obtainReference('NubioRevision')->getText(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('category', $this->obtainReference('NubioCategory')->getName(), 'utf-8'));
		
		$index->addDocument($doc);
		$index->commit();
	}
	
	public function revisionSave(Doctrine_Connection &$conn = null, sfForm &$form = null) {
		try {
			$this->revisionSaveInternal( $conn, $form );
			$this->updateLuceneIndex();
		}
		catch (Exception $e) {
			$conn->rollBack();
			throw $e;
		}

	}
	
	public function save(Doctrine_Connection $conn = null) {
		$conn = $conn ? $conn : $this->getTable()->getConnection();
		$conn->beginTransaction();
		try {
			$ret = parent::save($conn);
	
			$this->updateLuceneIndex();
	
			$conn->commit();
	
			return $ret;
		} catch (Exception $e) {
			$conn->rollBack();
			throw $e;
		}
	}
	
	public function delete(Doctrine_Connection $conn = null) {
		$index = NubioTopicTable::getLuceneIndex();
	
		foreach ($index->find('pk:'.$this->getId()) as $hit) {
			$index->delete($hit->id);
		}
	
		return parent::delete($conn);
	}
	
}
